# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.act_response import ActResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.scrape_response import ScrapeResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AgentClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def act(
        self,
        instance_id: str,
        *,
        cmd: str,
        include_screenshot: typing.Optional[bool] = OMIT,
        model: typing.Optional[typing.Literal["claude"]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActResponse:
        """
        Parameters
        ----------
        instance_id : str

        cmd : str

        include_screenshot : typing.Optional[bool]

        model : typing.Optional[typing.Literal["claude"]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActResponse
            Successful Response

        Examples
        --------
        from scrapybara import Scrapybara

        client = Scrapybara(
            api_key="YOUR_API_KEY",
        )
        client.agent.act(
            instance_id="instance_id",
            cmd="cmd",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/instance/{jsonable_encoder(instance_id)}/act",
            method="POST",
            json={
                "cmd": cmd,
                "include_screenshot": include_screenshot,
                "model": model,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ActResponse,
                    parse_obj_as(
                        type_=ActResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def scrape(
        self,
        instance_id: str,
        *,
        cmd: str,
        schema: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        include_screenshot: typing.Optional[bool] = OMIT,
        model: typing.Optional[typing.Literal["claude"]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScrapeResponse:
        """
        Parameters
        ----------
        instance_id : str

        cmd : str

        schema : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        include_screenshot : typing.Optional[bool]

        model : typing.Optional[typing.Literal["claude"]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScrapeResponse
            Successful Response

        Examples
        --------
        from scrapybara import Scrapybara

        client = Scrapybara(
            api_key="YOUR_API_KEY",
        )
        client.agent.scrape(
            instance_id="instance_id",
            cmd="cmd",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/instance/{jsonable_encoder(instance_id)}/scrape",
            method="POST",
            json={
                "cmd": cmd,
                "schema": schema,
                "include_screenshot": include_screenshot,
                "model": model,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ScrapeResponse,
                    parse_obj_as(
                        type_=ScrapeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAgentClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def act(
        self,
        instance_id: str,
        *,
        cmd: str,
        include_screenshot: typing.Optional[bool] = OMIT,
        model: typing.Optional[typing.Literal["claude"]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActResponse:
        """
        Parameters
        ----------
        instance_id : str

        cmd : str

        include_screenshot : typing.Optional[bool]

        model : typing.Optional[typing.Literal["claude"]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scrapybara import AsyncScrapybara

        client = AsyncScrapybara(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.agent.act(
                instance_id="instance_id",
                cmd="cmd",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/instance/{jsonable_encoder(instance_id)}/act",
            method="POST",
            json={
                "cmd": cmd,
                "include_screenshot": include_screenshot,
                "model": model,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ActResponse,
                    parse_obj_as(
                        type_=ActResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def scrape(
        self,
        instance_id: str,
        *,
        cmd: str,
        schema: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        include_screenshot: typing.Optional[bool] = OMIT,
        model: typing.Optional[typing.Literal["claude"]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScrapeResponse:
        """
        Parameters
        ----------
        instance_id : str

        cmd : str

        schema : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        include_screenshot : typing.Optional[bool]

        model : typing.Optional[typing.Literal["claude"]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScrapeResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scrapybara import AsyncScrapybara

        client = AsyncScrapybara(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.agent.scrape(
                instance_id="instance_id",
                cmd="cmd",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/instance/{jsonable_encoder(instance_id)}/scrape",
            method="POST",
            json={
                "cmd": cmd,
                "schema": schema,
                "include_screenshot": include_screenshot,
                "model": model,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ScrapeResponse,
                    parse_obj_as(
                        type_=ScrapeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
